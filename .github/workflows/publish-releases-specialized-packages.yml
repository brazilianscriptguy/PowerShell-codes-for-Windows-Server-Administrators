name: Build and Release Specialized Packages

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

permissions:
  contents: write

jobs:
  # ================================
  # Job: Cleanup Old Specialized Releases
  # ================================
  cleanup-old-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0  # Fetch all history for accurate tag detection

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Delete Older Releases for Managed Tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Fetching managed release tags from the matrix..."
          MANAGED_TAGS=("SysAdminToolSet" "ITSM-Templates-WKS" "ITSM-Templates-SVR" "GPOs-Templates" "READMEs-Files-Package")

          for tag in "${MANAGED_TAGS[@]}"; do
            echo "Processing tag: $tag"
            releases=$(gh release list --tag "$tag" --limit 100 --json name,tagName,createdAt | jq -r --arg tag "$tag" '.[] | select(.tagName == $tag) | "\(.createdAt) \(.tagName)"')

            if [ -z "$releases" ]; then
              echo "No releases found for tag '$tag'. Skipping cleanup."
              continue
            fi

            sorted_releases=$(echo "$releases" | sort)
            releases_to_delete=$(echo "$sorted_releases" | head -n -1 | awk '{print $2}')

            if [ -z "$releases_to_delete" ]; then
              echo "Only one release exists for tag '$tag'. No older releases to delete."
              continue
            fi

            for old_tag in $releases_to_delete; do
              echo "Deleting old release and tag: $old_tag"
              gh release delete "$old_tag" -y || { echo "Failed to delete release: $old_tag"; exit 1; }
              git push --delete origin "$old_tag" || { echo "Failed to delete tag: $old_tag"; exit 1; }
            done
          done

  # ================================
  # Job: Build and Release Specialized Packages
  # ================================
  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        release:
          - name: SysAdminToolSet
            tag: SysAdminToolSet
            release_zip: SysAdminToolSet.zip
            body: |
              Latest automated specialized release for SysAdminToolSet.
              [Download SysAdminToolSet](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ matrix.release.tag }}/${{ matrix.release.release_zip }})

          - name: ITSM-Templates-WKS
            tag: ITSM-Templates-WKS
            release_zip: ITSM-Templates-WKS.zip
            body: |
              Latest automated specialized release for ITSM-Templates-WKS.
              [Download ITSM-Templates-WKS](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ matrix.release.tag }}/${{ matrix.release.release_zip }})

          - name: ITSM-Templates-SVR
            tag: ITSM-Templates-SVR
            release_zip: ITSM-Templates-SVR.zip
            body: |
              Latest automated specialized release for ITSM-Templates-SVR.
              [Download ITSM-Templates-SVR](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ matrix.release.tag }}/${{ matrix.release.release_zip }})

          - name: GPOs-Templates
            tag: GPOs-Templates
            release_zip: GPOs-Templates.zip
            body: |
              Latest automated specialized release for GPOs-Templates.
              [Download GPOs-Templates](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ matrix.release.tag }}/${{ matrix.release.release_zip }})

          - name: READMEs-Files-Package
            tag: READMEs-Files-Package
            release_zip: READMEs-Files-Package.zip
            body: |
              This release contains all README.md files from the repository, renamed as $repository-name-README.md.
              [Download READMEs-Files-Package](https://github.com/${{ github.repository_owner }}/${{ github.event.repository.name }}/releases/download/${{ matrix.release.tag }}/${{ matrix.release.release_zip }})

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Handle Existing Release and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG_NAME="${{ matrix.release.tag }}"
          if gh release view "${TAG_NAME}" > /dev/null 2>&1; then
            gh release delete "${TAG_NAME}" -y
            git push --delete origin "${TAG_NAME}"
          fi

      - name: Create New Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ matrix.release.tag }}
          release_name: ${{ matrix.release.release_zip }}
          body: ${{ matrix.release.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Package ${{ matrix.release.name }}
        run: |
          set -e
          ${{ matrix.release.build_steps }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.release.release_zip }}
          asset_name: ${{ matrix.release.release_zip }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
