# .github/workflows/build-scripts-powershell-folder.yml
# Build and Release Workflow for Ubuntu-SysAdmin-ProSuite
name: Build and Release

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Install Dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq

      # Step 3: Generate a Tag Name and Release Name
      - name: Generate Tag and Release Names
        id: generate_names
        run: |
          TAG_NAME="v$(date +'%Y.%m.%d.%H%M%S')"
          RELEASE_NAME="Release $(date +'%Y-%m-%d %H:%M:%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          echo "release_name=$RELEASE_NAME" >> $GITHUB_ENV

      # Step 4: Create a New Release
      - name: Create New Release
        if: github.event_name != 'release'
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: ${{ env.release_name }}
          body: "Automatically created release after 20 commits."
          draft: false
          prerelease: false

      # Step 5: Build and Package Artifacts
      - name: Build and package artifacts
        id: package
        run: |
          # Create the main folder 'Scripts-PowerShell'
          mkdir -p Scripts-PowerShell

          # Copy LICENSE and README.md from the main repository to 'Scripts-PowerShell'
          cp LICENSE Scripts-PowerShell/ || true
          cp README.md Scripts-PowerShell/ || true

          # Copy 'Launch-Script-AutomaticMenu.ps1' to the root of 'Scripts-PowerShell'
          cp Core-ScriptLibrary/Launch-Script-AutomaticMenu.ps1 Scripts-PowerShell/ || true

          # Iterate over all subdirectories in the main repository and copy their contents
          for dir in */ ; do
              dir=${dir%/}  # Remove trailing slash
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".git" && "$dir" != ".github" ]]; then
                  mkdir -p Scripts-PowerShell/"$dir"
                  cp -r "$dir"/* Scripts-PowerShell/"$dir"/ || true
              fi
          done

          # Compress the 'Scripts-PowerShell' folder into a ZIP file
          zip -r Scripts-PowerShell-Folder.zip Scripts-PowerShell

          # Output the path to the ZIP file for later steps
          package_path=$(pwd)/Scripts-PowerShell-Folder.zip
          echo "package_path=$package_path" >> $GITHUB_ENV

      # Step 6: Compute SHA256 Hash of the Package
      - name: Compute SHA256 hash
        id: compute_hash
        run: |
          hash=$(sha256sum "${{ env.package_path }}" | awk '{print $1}')
          echo "hash=$hash" >> $GITHUB_ENV

      # Step 7: Upload the Package as a GitHub Release Asset
      - name: Upload Release Asset
        if: github.event_name == 'release' || github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.package_path }}
          asset_name: Scripts-PowerShell-Folder.zip
          asset_content_type: application/zip

      # Step 8: Update Release Notes with SHA256 Hash
      - name: Update Release Notes with SHA256 Hash
        if: steps.compute_hash.outputs.hash != ''
        uses: actions/github-script@v6
        with:
          script: |
            const hash = '${{ env.hash }}';
            const releaseId = ${{ steps.create_release.outputs.id }};
            const currentBody = '${{ steps.create_release.outputs.body }}';
            const updatedBody = `${currentBody}\n\n**SHA256 Hash of Scripts-PowerShell-Folder.zip:** \`${hash}\``;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: updatedBody
            });
