#<#
#.SYNOPSIS
#    GitHub Actions Workflow: Windows-based CI with RSAT + Pester

#.DESCRIPTION
#    1) Checks out code in ./repo
#    2) Installs RSAT for ActiveDirectory
#    3) Finds Manifest-ProSuite.psd1, sets MODULE_FILE
#    4) Validates the manifest
#    5) Imports the module, runs Pester tests
#    6) Packages the artifact

#.AUTHOR
#    Luiz Hamilton Silva - @brazilianscriptguy

#.VERSION
#    Last Updated: December 29, 2024
#>

name: CI/CD for Windows-SysAdmin-ProSuite

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build-and-test:
    runs-on: windows-latest

    steps:
      - name: Enable long paths
        shell: powershell
        run: git config --system core.longpaths true

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: repo

      - name: Install RSAT (Active Directory)
        shell: powershell
        run: |
          $feat = Get-WindowsFeature RSAT-AD-PowerShell -ErrorAction SilentlyContinue
          if ($feat -and $feat.Name -eq 'RSAT-AD-PowerShell') {
              if (-not $feat.Installed) {
                  Install-WindowsFeature RSAT-AD-PowerShell
              }
          }
          else {
              Add-WindowsCapability -Online -Name "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
          }
          Write-Host "RSAT ActiveDirectory installed."

      - name: Locate Manifest
        shell: powershell
        run: |
          $file = Get-ChildItem -Path './repo' -Filter "Manifest-ProSuite.psd1" -Recurse | Select-Object -First 1
          if (-not $file) {
            Write-Error "Manifest-ProSuite.psd1 not found!"
            exit 1
          }
          Write-Host "Manifest: $($file.FullName)"
          echo "MODULE_FILE=$($file.FullName)" >> $Env:GITHUB_ENV

      - name: Run Pester Tests
        shell: powershell
        run: |
          try {
            Write-Host "MODULE_FILE in pipeline step: $Env:MODULE_FILE"
            # DO NOT import the module here, let your test scripts do it to preserve the mock logic

            Write-Host "Running Pester tests..."
            Invoke-Pester -Path ./repo/Tests -Output Detailed

            Write-Host "Pester tests completed successfully."
          }
          catch {
            Write-Error "Pester tests failed: $_"
            exit 1
          }

      - name: Package
        shell: powershell
        run: |
          $dir = Split-Path $Env:MODULE_FILE
          if (-not (Test-Path './dist')) {
            New-Item -Path './dist' -ItemType Directory | Out-Null
          }
          $zip = Join-Path -Path './dist' -ChildPath 'Package-ProSuite.zip'
          Compress-Archive -Path "$dir/*" -DestinationPath $zip -Force
          Write-Host "Packaged at $zip."

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: Windows-SysAdmin-ProSuite
          path: ./dist/Package-ProSuite.zip

# End of script
