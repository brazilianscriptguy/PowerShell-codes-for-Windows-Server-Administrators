name: CI/CD Workflow for PowerShell Module

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    # Switch from ubuntu-latest to windows-latest
    runs-on: windows-latest

    steps:
      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Optional: Install RSAT (Active Directory Tools) if not already available
      - name: Install RSAT for Active Directory
        shell: pwsh
        run: |
          # On Windows runners, this adds the AD DS Tools, including the ActiveDirectory module.
          Add-WindowsCapability -Online -Name "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
          Write-Host "RSAT ActiveDirectory tools installed."

      # Locate the PowerShell Module File
      - name: Locate PowerShell Module
        id: locate-module
        shell: pwsh
        run: |
          $moduleFile = (Get-ChildItem -Path . -Filter "Windows-SysAdmin-ProSuite.psd1" -Recurse | Select-Object -First 1).FullName
          if (-not $moduleFile) {
            Write-Error "Error: Windows-SysAdmin-ProSuite.psd1 not found in the repository!"
            exit 1
          }
          Write-Host "Module file located at: $moduleFile"
          echo "MODULE_FILE=$moduleFile" | Out-Host
          echo "MODULE_FILE=$moduleFile" >> $Env:GITHUB_ENV

      # Validate PowerShell Module Manifest
      - name: Validate PowerShell Module Manifest
        shell: pwsh
        run: |
          try {
            $modulePath = $env:MODULE_FILE
            Write-Host "Validating module manifest at: $modulePath"
            Test-ModuleManifest -Path $modulePath -ErrorAction Stop
            Write-Host "Module manifest validation successful."
          } catch {
            Write-Error "Failed to validate the module manifest: $_"
            exit 1
          }

      # Run Pester Tests
      - name: Run PowerShell Tests
        shell: pwsh
        run: |
          try {
            Write-Host "Importing module before tests..."
            Import-Module $env:MODULE_FILE  # import the module

            Write-Host "Running Pester tests..."
            Invoke-Pester -Path ./Tests -Output Detailed

            Write-Host "Pester tests completed successfully."
          } catch {
            Write-Error "Pester tests failed: $_"
            exit 1
          }

      # Package the PowerShell Module
      - name: Package PowerShell Module
        shell: pwsh
        run: |
          $moduleDir = Split-Path -Path $env:MODULE_FILE
          New-Item -Path './dist' -ItemType Directory -Force | Out-Null
          Compress-Archive -Path "$moduleDir/*" -DestinationPath './dist/Windows-SysAdmin-ProSuite.zip' -Force
          Write-Host "Packaging complete. Archive saved at ./dist/Windows-SysAdmin-ProSuite.zip."

      # Upload the Package as an Artifact
      - name: Upload PowerShell Module Package
        uses: actions/upload-artifact@v3
        with:
          name: Windows-SysAdmin-ProSuite
          path: ./dist/Windows-SysAdmin-ProSuite.zip
