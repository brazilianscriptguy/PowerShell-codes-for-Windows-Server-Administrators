name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Generate Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%j')       # Day of the year (001-365)
          revision=$((10#$(date +'%H') * 100 + 10#$(date +'%M')))  # Hour and minute as revision
          if (( revision > 65535 )); then
              revision=$((revision % 65536))  # Ensure revision fits within 0-65535
          fi
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV
          echo "Generated version: $version"

      - name: Prepare Files
        run: |
          mkdir -p Scripts-PowerShell
          cp LICENSE Scripts-PowerShell/ || echo "LICENSE not found, skipping."
          cp README.md Scripts-PowerShell/ || echo "README.md not found, skipping."
          for dir in */; do
              dir=${dir%/}
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".git" && "$dir" != ".github" ]]; then
                  mkdir -p Scripts-PowerShell/"$dir"
                  cp -r "$dir"/* Scripts-PowerShell/"$dir"/ || echo "No files found in $dir, skipping."
              fi
          done

      - name: Update Project File
        run: |
          cat > nuget.package.csproj <<- EOF
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>net7.0</TargetFramework>
              <PackageId>Scripts-PowerShell</PackageId>
              <Version>${{ env.version }}</Version>
              <Authors>Luiz Hamilton Silva</Authors>
              <Company>Brazilianscriptguy</Company>
              <Description>
                Comprehensive suite of PowerShell and VBScript tools automates Active Directory tasks, advances forensic analysis, 
                and simplifies script creation. Designed for managing Windows Servers and workstations, these tools ensure accuracy, 
                efficiency, scalability, and adaptability.
              </Description>
              <PackageTags>PowerShell;Automation;SysAdmin;ActiveDirectory;Forensics</PackageTags>
              <RepositoryUrl>https://github.com/brazilianscriptguy/Windows-SysAdmin-ProSuite</RepositoryUrl>
              <NoWarn>NU5110;NU5111;NU5123</NoWarn>
            </PropertyGroup>
            <ItemGroup>
              <Content Include="Scripts-PowerShell/**" Exclude="Scripts-PowerShell/SysAdmin-Tools/GroupPolicyObjects-Templates/**" PackagePath="content/" />
            </ItemGroup>
          </Project>
          EOF

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build and Pack
        run: |
          mkdir -p ./artifacts
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts || {
            echo "Error: Failed to pack NuGet package.";
            exit 1;
          }

      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push ./artifacts/Scripts-PowerShell.*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate
