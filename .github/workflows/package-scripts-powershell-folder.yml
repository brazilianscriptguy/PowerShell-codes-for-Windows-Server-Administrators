name: Publish NuGet Package

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Set up .NET
      - name: Set Up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Step 3: Generate Version
      - name: Generate Version
        id: generate_version
        run: |
          date_suffix=$(date +'%Y%m%d')
          build_number=$(date +'%H%M')
          version="1.0.${date_suffix}.${build_number}"
          echo "version=$version" >> $GITHUB_ENV
          echo "Generated version: $version"

      # Step 4: Prepare Files for Packaging
      - name: Prepare Files
        run: |
          echo "Preparing the Scripts-PowerShell folder..."
          mkdir -p Scripts-PowerShell

          # Copy LICENSE and README.md
          cp LICENSE Scripts-PowerShell/ || echo "LICENSE not found, skipping."
          cp README.md Scripts-PowerShell/ || echo "README.md not found, skipping."

          # Copy Launch-Script-AutomaticMenu.ps1
          if [ -f Core-ScriptLibrary/Launch-Script-AutomaticMenu.ps1 ]; then
            cp Core-ScriptLibrary/Launch-Script-AutomaticMenu.ps1 Scripts-PowerShell/
          else
            echo "Launch-Script-AutomaticMenu.ps1 not found, skipping."
          fi

          # Gather files from sub-repositories
          for dir in */ ; do
              dir=${dir%/}
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".git" && "$dir" != ".github" ]]; then
                  echo "Processing directory: $dir"
                  mkdir -p Scripts-PowerShell/"$dir"
                  cp -r "$dir"/* Scripts-PowerShell/"$dir"/ || echo "No files found in $dir, skipping."
              fi
          done

      # Step 5: Update the Project File to Include Scripts
      - name: Update Project File
        run: |
          cat > nuget.package.csproj <<- EOF
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>net7.0</TargetFramework>
              <Version>${{ env.version }}</Version>
              <Authors>Luiz Hamilton Silva</Authors>
              <Company>Brazilianscriptguy</Company>
              <Description>Comprehensive suite of PowerShell and VBScript tools automates Active Directory tasks, advances forensic analysis, and simplifies script creation.</Description>
              <PackageTags>PowerShell;Automation;SysAdmin;ActiveDirectory;Forensics</PackageTags>
              <RepositoryUrl>https://github.com/brazilianscriptguy/Windows-SysAdmin-ProSuite</RepositoryUrl>
            </PropertyGroup>
            <ItemGroup>
              <Content Include="Scripts-PowerShell/**" PackagePath="content/" />
            </ItemGroup>
          </Project>
          EOF

      # Step 6: Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore nuget.package.csproj

      # Step 7: Build and Pack the NuGet Package
      - name: Build and Pack
        run: |
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts || {
            echo "Error: Failed to pack NuGet package.";
            exit 1;
          }

      # Step 8: Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push ./artifacts/*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate

      # Step 9: Cleanup (Optional)
      - name: Cleanup Temporary Files
        if: always()
        run: |
          rm -rf Scripts-PowerShell
          rm nuget.package.csproj
