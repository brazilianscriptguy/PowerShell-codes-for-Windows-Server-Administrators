name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Generate Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%Y%m%d')
          revision=$(date +'%H%M')
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV

      - name: Prepare Files
        run: |
          echo "Preparing Scripts-PowerShell directory..."
          mkdir -p Scripts-PowerShell
          
          if [[ -f LICENSE ]]; then
              cp LICENSE Scripts-PowerShell/
          else
              echo "LICENSE file not found."
          fi

          if [[ -f README.md ]]; then
              cp README.md Scripts-PowerShell/
          else
              echo "README.md file not found."
          fi

          for dir in */ ; do
              dir=${dir%/}
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".github" && "$dir" != "SysAdmin-Tools/GroupPolicyObjects-Templates" ]]; then
                  echo "Processing directory: $dir"
                  mkdir -p "Scripts-PowerShell/$dir"
                  find "$dir" -type f ! -name '.*' -exec cp --parents {} "Scripts-PowerShell/" \; || echo "Skipping directory: $dir"
              fi
          done

          echo "Files prepared in Scripts-PowerShell directory:"
          find Scripts-PowerShell -type f

      - name: Restore Dependencies
        run: dotnet restore

      - name: Build Project
        run: dotnet build nuget.package.csproj --configuration Release -p:Version=${{ env.version }}

      - name: Pack NuGet Package
        run: |
          echo "Packing the NuGet package..."
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts -p:Version=${{ env.version }}
          echo "Checking artifacts directory..."
          ls ./artifacts
          package_file=$(find ./artifacts -name "Scripts-PowerShell*.nupkg")
          if [[ -z "$package_file" ]]; then
              echo "Error: Package not found in ./artifacts"
              exit 1
          fi
          echo "Package successfully created: $package_file"

      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push ./artifacts/Scripts-PowerShell*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate
