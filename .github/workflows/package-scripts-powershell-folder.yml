name: Publish NuGet Package

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Set up .NET
      - name: Set Up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Step 3: Generate Version
      - name: Generate Version
        id: generate_version
        run: |
          # Generate version string in the format major.minor.build.revision
          major="1"
          minor="0"
          build=$(date +'%j')          # Day of the year (001-365)
          hour=$(date +'%H')           # Hour (00-23)
          revision=$(date +'%M')       # Minute (00-59)
          version="${major}.${minor}.${build}.${hour}${revision}"
          echo "version=$version" >> $GITHUB_ENV
          echo "Generated version: $version"

      # Step 4: Prepare Files for Packaging
      - name: Prepare Files
        run: |
          echo "Preparing the Scripts-PowerShell folder..."
          mkdir -p Scripts-PowerShell

          # Copy LICENSE and README.md
          cp LICENSE Scripts-PowerShell/ || echo "LICENSE not found, skipping."
          cp README.md Scripts-PowerShell/ || echo "README.md not found, skipping."

          # Copy Launch-Script-AutomaticMenu.ps1
          cp Core-ScriptLibrary/Launch-Script-AutomaticMenu.ps1 Scripts-PowerShell/ || echo "Launch-Script-AutomaticMenu.ps1 not found, skipping."

          # Gather files from sub-repositories
          for dir in */ ; do
              dir=${dir%/}
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".git" && "$dir" != ".github" ]]; then
                  echo "Processing directory: $dir"
                  mkdir -p Scripts-PowerShell/"$dir"
                  cp -r "$dir"/* Scripts-PowerShell/"$dir"/ || echo "No files found in $dir, skipping."
              fi
          done

      # Step 5: Update the Project File for NuGet Packaging
      - name: Update Project File
        run: |
          echo "Creating nuget.package.csproj..."
          cat > nuget.package.csproj <<- EOF
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>net7.0</TargetFramework>
              <Version>${{ env.version }}</Version>
              <Authors>Luiz Hamilton Silva</Authors>
              <Company>Brazilianscriptguy</Company>
              <Description>
                Comprehensive suite of PowerShell and VBScript tools automates Active Directory tasks, advances forensic analysis, 
                and simplifies script creation. Designed for managing Windows Servers and workstations, these tools ensure accuracy, 
                efficiency, scalability, and adaptability.
              </Description>
              <PackageTags>PowerShell;Automation;SysAdmin;ActiveDirectory;Forensics</PackageTags>
              <RepositoryUrl>https://github.com/brazilianscriptguy/Windows-SysAdmin-ProSuite</RepositoryUrl>
              <NoWarn>NU5110;NU5111;NU5123</NoWarn> <!-- Suppress warnings -->
            </PropertyGroup>
            <ItemGroup>
              <Content Include="Scripts-PowerShell/**" Exclude="Scripts-PowerShell/SysAdmin-Tools/GroupPolicyObjects-Templates/**" PackagePath="content/" />
            </ItemGroup>
          </Project>
          EOF
          echo "nuget.package.csproj created."

      # Step 6: Restore Dependencies
      - name: Restore Dependencies
        run: dotnet restore nuget.package.csproj

      # Step 7: Build and Pack the NuGet Package
      - name: Build and Pack
        run: |
          echo "Packing the NuGet package..."
          mkdir -p ./artifacts  # Ensure the artifacts directory exists
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts || {
            echo "Error: Failed to pack NuGet package.";
            exit 1;
          }

          # Verify the package exists
          if [[ ! -f ./artifacts/Scripts-PowerShell*.nupkg ]]; then
              echo "Error: NuGet package not found in ./artifacts";
              ls ./artifacts
              exit 1;
          fi
          echo "Package successfully created in ./artifacts"

      # Step 8: Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Publishing package to GitHub Packages..."
          ls ./artifacts  # Debug output to verify package presence
          dotnet nuget push ./artifacts/Scripts-PowerShell*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate
