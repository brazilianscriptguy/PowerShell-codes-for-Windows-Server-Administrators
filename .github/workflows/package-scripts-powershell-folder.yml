name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Set Up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      - name: Generate Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%j')
          revision=$((10#$(date +'%H') * 100 + 10#$(date +'%M')))
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV
          echo "Generated version: $version"

      - name: Prepare Files
        run: |
          echo "Preparing the Scripts-PowerShell folder..."
          mkdir -p Scripts-PowerShell

          cp -r Core-ScriptLibrary/* Scripts-PowerShell/ || echo "Core-ScriptLibrary not found, skipping."
          cp LICENSE Scripts-PowerShell/ || echo "LICENSE not found, skipping."
          cp README.md Scripts-PowerShell/ || echo "README.md not found, skipping."

      - name: Update Project File
        run: |
          echo "Creating nuget.package.csproj..."
          cat > nuget.package.csproj <<- EOF
          <Project Sdk="Microsoft.NET.Sdk">
            <PropertyGroup>
              <TargetFramework>net7.0</TargetFramework>
              <PackageId>Scripts-PowerShell</PackageId>
              <Version>${{ env.version }}</Version>
              <Authors>Luiz Hamilton Silva</Authors>
              <Company>Brazilianscriptguy</Company>
              <Description>
                Comprehensive suite of PowerShell and VBScript tools automates Active Directory tasks, advances forensic analysis, 
                and simplifies script creation. Designed for managing Windows Servers and workstations, these tools ensure accuracy, 
                efficiency, scalability, and adaptability.
              </Description>
              <PackageTags>PowerShell;Automation;SysAdmin;ActiveDirectory;Forensics</PackageTags>
              <RepositoryUrl>https://github.com/brazilianscriptguy/Windows-SysAdmin-ProSuite</RepositoryUrl>
              <NoWarn>NU5110;NU5111;NU5123</NoWarn>
            </PropertyGroup>
            <ItemGroup>
              <Content Include="Scripts-PowerShell/**/*.*" PackagePath="content/" />
              <Content Remove="Scripts-PowerShell/SysAdmin-Tools/GroupPolicyObjects-Templates/**" />
            </ItemGroup>
          </Project>
          EOF

      - name: Restore Dependencies
        run: dotnet restore nuget.package.csproj

      - name: Build and Pack
        run: |
          echo "Packing the NuGet package..."
          mkdir -p ./artifacts
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts || {
            echo "Error: Failed to pack NuGet package.";
            exit 1;
          }

          package_file=$(find ./artifacts -name "Scripts-PowerShell*.nupkg")
          if [[ -z "$package_file" ]]; then
              echo "Error: NuGet package not found in ./artifacts";
              ls ./artifacts
              exit 1;
          fi
          echo "Package successfully created: $package_file"

      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push ./artifacts/Scripts-PowerShell.*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate
