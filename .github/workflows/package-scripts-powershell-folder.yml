name: Publish NuGet Package

on:
  workflow_dispatch:  # Allows manual triggering of the workflow
  push:
    tags:
      - 'v*'  # Trigger on tags starting with 'v'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Step 3: Generate Version
      - name: Generate Version
        id: generate_version
        run: |
          version=$(date +'%Y%m%d.%H%M%S')
          echo "version=$version" >> $GITHUB_ENV

      # Step 4: Prepare Files for Packaging
      - name: Prepare Files
        run: |
          echo "Preparing the Scripts-PowerShell folder..."
          mkdir -p Scripts-PowerShell

          echo "Copying LICENSE and README.md..."
          cp LICENSE Scripts-PowerShell/ || echo "LICENSE not found, skipping."
          cp README.md Scripts-PowerShell/ || echo "README.md not found, skipping."

          echo "Copying Launch-Script-AutomaticMenu.ps1..."
          cp Core-ScriptLibrary/Launch-Script-AutomaticMenu.ps1 Scripts-PowerShell/ || echo "Launch-Script-AutomaticMenu.ps1 not found, skipping."

          echo "Gathering files from sub-repositories..."
          for dir in */ ; do
              dir=${dir%/}
              if [[ "$dir" != "Scripts-PowerShell" && "$dir" != ".git" && "$dir" != ".github" ]]; then
                  echo "Processing directory: $dir"
                  mkdir -p Scripts-PowerShell/"$dir"
                  cp -r "$dir"/* Scripts-PowerShell/"$dir"/ || echo "No files found in $dir, skipping."
              fi
          done

      # Step 5: Build and Package Artifacts
      - name: Build and Package Artifacts
        run: |
          echo "Packaging the NuGet package..."
          dotnet pack nuget.package.csproj --configuration Release --output ./artifacts || {
              echo "Error: Failed to pack NuGet package.";
              exit 1;
          }
          echo "Package successfully created in ./artifacts"

      # Step 6: Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Publishing package to GitHub Packages..."
          dotnet nuget push ./artifacts/Scripts-PowerShell.*.nupkg --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate || {
              echo "Error: Failed to publish package.";
              exit 1;
          }
          echo "Package successfully published to GitHub Packages."
