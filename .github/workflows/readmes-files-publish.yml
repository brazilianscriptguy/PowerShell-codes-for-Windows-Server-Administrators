name: Publish README Files

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

permissions:
  contents: write  # Required for creating releases and uploading assets

jobs:
  cleanup-old-releases:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.6.0
        with:
          submodules: true
          fetch-depth: 0  # Fetch all history for accurate tag detection

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh zip

      - name: Cache GitHub CLI
        uses: actions/cache@v3
        with:
          path: ~/.local/share/gh
          key: ${{ runner.os }}-gh-${{ hashFiles('**/gh_version') }}
          restore-keys: |
            ${{ runner.os }}-gh-

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Delete Older Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching all releases..."
          gh release list --limit 100 --json tagName,createdAt | \
          jq -r 'sort_by(.createdAt) | .[0:-1] | .[].tagName' | \
          while read -r tag; do
            echo "Deleting old release and tag: $tag"
            gh release delete "$tag" -y || echo "Failed to delete release: $tag"
            git push --delete origin "$tag" || echo "Failed to delete tag: $tag"
          done

  gather-and-publish-readmes:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3.6.0
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh

      - name: Cache GitHub CLI
        uses: actions/cache@v3
        with:
          path: ~/.local/share/gh
          key: ${{ runner.os }}-gh-${{ hashFiles('**/gh_version') }}
          restore-keys: |
            ${{ runner.os }}-gh-

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Handle Existing Release and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          if gh release view "${TAG_NAME}" > /dev/null 2>&1; then
            echo "Release for tag '${TAG_NAME}' exists. Deleting..."
            gh release delete "${TAG_NAME}" -y || echo "Failed to delete release: ${TAG_NAME}"
            git push --delete origin "${TAG_NAME}" || echo "Failed to delete tag: ${TAG_NAME}"
          else
            echo "No existing release for tag '${TAG_NAME}'. Proceeding..."
          fi

      - name: Create New Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "README Files Release ${{ github.ref_name }}"
          body: |
            This release contains all `README.md` files from the repository, renamed as `$repository-name-README.md`.
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Find and Rename README.md Files
        run: |
          echo "Searching for README.md files..."
          # Create a directory to store renamed READMEs
          mkdir -p readmes

          # Find all README.md files excluding the root README.md
          find . -type f -name "README.md" ! -path "./README.md" | while read -r file; do
            # Extract the immediate parent directory name
            repo_dir=$(dirname "$file")
            repo_name=$(basename "$repo_dir")

            # Define the new filename
            new_filename="${repo_name}-README.md"

            # Copy and rename the README.md to the readmes directory
            cp "$file" "readmes/$new_filename"
            echo "Copied and renamed $file to readmes/$new_filename"
          done

      - name: Verify Renamed Files
        run: |
          echo "Renamed README.md files:"
          ls -l readmes/

      - name: Package Renamed READMEs into a Zip Archive
        run: |
          echo "Packaging renamed README.md files into readmes.zip..."
          mkdir -p artifacts
          zip -r artifacts/readmes.zip readmes/
          echo "Packaging complete."
          echo "package_path=$(pwd)/artifacts/readmes.zip" >> $GITHUB_ENV

      - name: Upload README Zip to Release
        uses: actions/upload-release-asset@v1.0.0
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/readmes.zip
          asset_name: readmes.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Optional: Notify Slack on Success
      - name: Notify Slack on Success
        if: success()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "✅ README Files Release ${{ github.ref_name }} published successfully."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      # Optional: Notify Slack on Failure
      - name: Notify Slack on Failure
        if: failure()
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "❌ README Files Release ${{ github.ref_name }} failed to publish."
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
