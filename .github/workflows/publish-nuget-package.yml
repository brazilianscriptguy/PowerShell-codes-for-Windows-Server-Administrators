name: Publish NuGet Package

on:
  workflow_dispatch:
  release:
    types: [published]
  schedule:
    - cron: '0 0 * * *'  # Runs daily at midnight UTC

permissions:
  contents: write

jobs:
  # ================================
  # Job: Cleanup Old Releases
  # ================================
  cleanup-old-releases:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Delete Older Releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          MANAGED_TAGS=("SysAdminToolSet" "ITSM-Templates-WKS" "ITSM-Templates-SVR" "GPOs-Templates" "READMEs-Files-Package" "NuGet-Package")
          for tag in "${MANAGED_TAGS[@]}"; do
            releases=$(gh release list --tag "$tag" --limit 100 --json tagName,createdAt | jq -r '.[] | .tagName' | head -n -1)
            for old_tag in $releases; do
              gh release delete "$old_tag" -y || true
              git push --delete origin "$old_tag" || true
            done
          done

  # ================================
  # Job: Build and Release Specialized Packages
  # ================================
  build-and-release:
    needs: cleanup-old-releases
    runs-on: ubuntu-latest
    strategy:
      matrix:
        task:
          - name: Specialized Releases
            matrix:
              release:
                - name: SysAdminToolSet
                  tag: SysAdminToolSet
                  release_zip: SysAdminToolSet.zip
                  build_steps: |
                    mkdir -p SysAdminToolSet
                    cp LICENSE SysAdminToolSet/
                    zip -r artifacts/SysAdminToolSet.zip SysAdminToolSet

                - name: ITSM-Templates-WKS
                  tag: ITSM-Templates-WKS
                  release_zip: ITSM-Templates-WKS.zip
                  build_steps: |
                    mkdir -p artifacts
                    zip -r artifacts/ITSM-Templates-WKS.zip ITSM-Templates-WKS

          - name: NuGet Package
            matrix:
              release:
                - name: NuGet-Package
                  tag: NuGet-Package
                  build_steps: |
                    mkdir -p ./artifacts
                    dotnet restore nuget.package.csproj
                    dotnet pack nuget.package.csproj --output ./artifacts -p:Version=${{ env.version }}
                    if [[ ! -f ./artifacts/Windows-SysAdmin-ProSuite*.nupkg ]]; then
                      echo "NuGet package creation failed."
                      exit 1
                    fi

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y zip jq gh

      - name: Configure GitHub CLI for Git Operations
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh auth setup-git

      - name: Handle Existing Release and Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "${{ matrix.release.tag }}" > /dev/null 2>&1; then
            gh release delete "${{ matrix.release.tag }}" -y || true
            git push --delete origin "${{ matrix.release.tag }}" || true
          fi

      - name: Create New Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ matrix.release.tag }}
          release_name: ${{ matrix.release.release_zip }}
          body: ${{ matrix.release.body }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Package
        run: |
          set -e
          mkdir -p artifacts
          ${{ matrix.release.build_steps }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: artifacts/${{ matrix.release.release_zip }}
          asset_name: ${{ matrix.release.release_zip }}
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

