name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Install Mono (Required for nuget.exe on Linux)
      - name: Install Mono
        run: |
          sudo apt-get update
          sudo apt-get install -y mono-complete

      # Step 3: Install NuGet CLI
      - name: Install NuGet CLI
        run: |
          wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O nuget.exe
          chmod +x ./nuget.exe

      # Step 4: Generate Dynamic Version
      - name: Generate Dynamic Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%y%m%d')
          revision=$(date +'%H%M%S')
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV

      # Step 5: Verify Nuspec File Exists
      - name: Verify Nuspec File
        run: |
          if [ ! -f "NuGet/nuget.package.nuspec" ]; then
            echo "Error: NuGet/nuget.package.nuspec does not exist in the repository."
            exit 1
          fi
          echo "NuGet/nuget.package.nuspec found."

      # Step 6: List NuGet Directory for Debugging
      - name: List NuGet Directory
        run: |
          echo "Listing contents of NuGet directory:"
          ls -la NuGet/

      # Step 7: Validate Nuspec File
      - name: Validate Nuspec File
        run: |
          echo "Validating nuspec file..."
          mono ./nuget.exe spec NuGet/nuget.package.nuspec

      # Step 8: Update Version in Nuspec
      - name: Update Version in Nuspec
        run: |
          sed -i "s|<version>.*</version>|<version>${{ env.version }}</version>|g" NuGet/nuget.package.nuspec

      # Step 9: Generate Placeholder .dll (if missing)
      - name: Generate Placeholder .dll (if missing)
        run: |
          mkdir -p NuGetPackageContent/lib/net7.0
          if [ ! -f "NuGetPackageContent/lib/net7.0/PlaceholderDll.dll" ]; then
              echo "Generating placeholder .dll..."
              mkdir -p PlaceholderDll
              cd PlaceholderDll
              dotnet new classlib -n PlaceholderDll
              sed -i 's/<PropertyGroup>/<PropertyGroup><Version>1.0.0<\/Version>/' PlaceholderDll/PlaceholderDll.csproj
              dotnet build PlaceholderDll/PlaceholderDll.csproj -o ../NuGetPackageContent/lib/net7.0
              cd ..
              echo "Placeholder .dll generated at NuGetPackageContent/lib/net7.0/PlaceholderDll.dll"
          else
              echo "Placeholder .dll already exists."
          fi

      # Step 10: Prepare Files for NuGet Package
      - name: Prepare Files for NuGet Package
        run: |
          mkdir -p NuGetPackageContent
          cp -r BlueTeam-Tools NuGetPackageContent/ || true
          cp -r Core-ScriptLibrary NuGetPackageContent/ || true
          cp -r ITSM-Templates-SVR NuGetPackageContent/ || true
          cp -r ITSM-Templates-WKS NuGetPackageContent/ || true
          cp -r SysAdmin-Tools NuGetPackageContent/ || true
          cp LICENSE NuGetPackageContent/ || true
          cp README.md NuGetPackageContent/ || true

      # Step 11: Pack NuGet Package Using nuget.exe
      - name: Pack NuGet Package
        run: |
          mkdir -p ./artifacts
          mono ./nuget.exe pack NuGet/nuget.package.nuspec -OutputDirectory ./artifacts
          ls ./artifacts

      # Step 12: Inspect NuGet Package
      - name: Inspect NuGet Package
        run: |
          echo "Inspecting the contents of the package..."
          unzip -l ./artifacts/Windows-SysAdmin-ProSuite*.nupkg || true

      # Step 13: Fetch Existing NuGet Packages from GitHub Packages
      - name: Fetch Existing NuGet Packages
        id: fetch-packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching existing NuGet packages from GitHub Packages..."
          
          # Fetch package names and store in existing_packages.txt
          curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github+json" \
               "https://api.github.com/users/${{ github.repository_owner }}/packages?package_type=nuget&per_page=100" | \
               jq -r '.[].name' > existing_packages.txt
          
          echo "Existing Packages:"
          cat existing_packages.txt

      # Step 14: Publish New NuGet Package Using nuget.exe
      - name: Publish NuGet Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          artifact_dir="artifacts"
          
          for package_path in "$artifact_dir"/*.nupkg; do
            [ -e "$package_path" ] || continue  # Skip if no .nupkg files

            package_name=$(basename "$package_path")
            echo "Processing package: $package_name"

            if grep -Fxq "$package_name" existing_packages.txt; then
              echo "Package '$package_name' already exists. Skipping..."
              continue
            fi

            echo "Pushing '$package_name' to GitHub Packages..."
            mono ./nuget.exe push "$package_path" \
              -ApiKey "$GITHUB_TOKEN" \
              -Source "https://nuget.pkg.github.com/brazilianscriptguy/index.json" \
              --skip-duplicate || {
                echo "Error: Failed to push '$package_name'."
                exit 1
              }
          done
    ```

### **Key Corrections and Enhancements**

1. **Proper Indentation:**
   - Ensured that `shell` and `env` are **not** nested under the `run` command. They should be at the same indentation level as `run`.
   - **Example:**
     ```yaml
     - name: Some Step
       run: |
         echo "Hello World"
       shell: /usr/bin/bash -e {0}
       env:
         VAR: value
     ```

2. **Using `nuget.exe` Instead of `dotnet pack` for `.nuspec` Files:**
   - `dotnet pack` is intended for project-based packaging (`.csproj`), whereas `nuget.exe pack` is suitable for `.nuspec` files.
   - **Installation Steps:**
     - **Mono Installation:** Required to run `nuget.exe` on Linux.
     - **nuget.exe Installation:** Downloaded and made executable.

3. **Correct `.nuspec` File Path:**
   - Updated all references to point to `NuGet/nuget.package.nuspec` instead of just `nuget.package.nuspec`.
   - Added a verification step to ensure the file exists before attempting to modify it.

4. **Dynamic Version Generation:**
   - The version is dynamically generated and updated in the `.nuspec` file.

5. **Fetching Existing Packages:**
   - Used GitHub API to fetch existing NuGet packages to avoid pushing duplicates.

6. **Publishing Packages:**
   - Iterates through the `artifacts` directory and publishes only new packages.

### **Common YAML Syntax Errors to Avoid**

- **Incorrect Indentation:**
  - YAML relies heavily on indentation. Ensure consistent use of spaces (preferably 2 spaces per level) and avoid mixing tabs with spaces.

- **Misaligned Keys:**
  - Keys like `run`, `shell`, and `env` should be aligned correctly under each step.

- **Missing Hyphens:**
  - Each step should begin with a `-` followed by a space.

### **Example of Correct Step Structure**

```yaml
- name: Step Name
  run: |
    echo "Commands here"
  shell: /usr/bin/bash -e {0}
  env:
    VAR_NAME: value
