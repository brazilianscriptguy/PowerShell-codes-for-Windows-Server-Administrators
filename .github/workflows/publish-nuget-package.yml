name: Publish NuGet Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  contents: write
  packages: write  # Required for managing GitHub Packages

jobs:
  publish-nuget-package:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Delete Old Versions of the Package (if any)
      - name: Clean up Old NuGet Package Versions
        env:
          PACKAGE_NAME: "Windows-SysAdmin-ProSuite"
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          echo "Fetching old package versions for ${PACKAGE_NAME}..."

          # API endpoint
          API_URL="https://api.github.com/orgs/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions"

          # Fetch all versions of the package
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL")

          # Validate JSON response
          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Error: Invalid API response or no existing package versions found."
            exit 0
          fi

          # Extract package version IDs
          echo "$response" | jq -r '.[].id' > package_ids.txt

          # Check if package IDs exist
          if [ ! -s package_ids.txt ]; then
            echo "No existing package versions found for ${PACKAGE_NAME}."
            exit 0
          fi

          # Delete all package versions
          while IFS= read -r package_id; do
            echo "Deleting version ID: $package_id"
            DELETE_URL="https://api.github.com/orgs/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions/$package_id"
            curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$DELETE_URL" || echo "Failed to delete version ID: $package_id"
          done < package_ids.txt

          echo "Old versions of ${PACKAGE_NAME} have been cleaned."

      # Step 3: Publish the New NuGet Package
      - name: Publish NuGet Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push artifacts/Windows-SysAdmin-ProSuite.1.0.1.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key $GITHUB_TOKEN
