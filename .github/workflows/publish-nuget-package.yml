name: Publish NuGet Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  packages: write
  contents: read

jobs:
  publish-nuget-package:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Fetch Published NuGet Packages
      - name: Fetch Published NuGet Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        run: |
          echo "Fetching the list of published NuGet packages..."
          
          # Fetch the response and print it for debugging
          response=$(curl -s -H "Authorization: Bearer $NUGET_AUTH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/orgs/${{ github.repository_owner }}/packages?package_type=nuget")

          echo "API Response:"
          echo "$response"

          # Verify if the response is valid JSON
          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Error: Invalid JSON response from the API."
            exit 1
          fi

          # Extract package names
          echo "$response" | jq -r '.[] | .name' > published_packages.txt || {
            echo "Error: Failed to extract package names from the response."
            exit 1
          }

          echo "Published packages:"
          cat published_packages.txt

      # Step 3: Push New NuGet Packages
      - name: Push NuGet Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        run: |
          echo "Pushing new NuGet packages to GitHub Packages..."
          for package in artifacts/*.nupkg; do
            package_name=$(basename "$package")
            package_base_name="${package_name%.nupkg}"

            echo "Processing package: $package_base_name"

            # Check if the package already exists in the published list
            if grep -q "$package_base_name" published_packages.txt; then
              echo "Package $package_base_name already exists. Skipping..."
              continue
            fi

            # Push the package
            dotnet nuget push "$package" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --api-key $NUGET_AUTH_TOKEN --skip-duplicate || {
                echo "Skipping package due to conflict or duplicate: $package"
              }
          done

      # Step 4: Generate Links for Published Packages
      - name: Generate Links for Published Packages
        env:
          REPO_URL: "https://github.com/${{ github.repository_owner }}/Windows-SysAdmin-ProSuite"
        run: |
          echo "Generating links for published packages..."
          while IFS= read -r package_name; do
            echo "Package: $package_name"
            echo "${REPO_URL}/packages/$package_name"
          done < published_packages.txt
