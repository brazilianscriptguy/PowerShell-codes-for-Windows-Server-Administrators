name: Publish NuGet Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  packages: write
  contents: read

jobs:
  publish-nuget-package:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Verify Artifacts Directory and Package
      - name: Verify NuGet Package
        run: |
          echo "Verifying if NuGet package exists..."
          if [ ! -f "artifacts/Windows-SysAdmin-ProSuite.1.0.1.nupkg" ]; then
            echo "Error: NuGet package file not found in artifacts directory."
            exit 1
          fi

      # Step 3: Authenticate GitHub Packages API
      - name: Verify GitHub Authentication
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Testing GitHub Packages API authentication..."
          curl -X GET -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/user/packages || exit 1

      # Step 4: Optional Cleanup of Old Versions
      - name: Clean Up Old NuGet Package Versions
        if: ${{ inputs.cleanup_old == 'true' }} # Optional cleanup flag
        env:
          PACKAGE_NAME: "Windows-SysAdmin-ProSuite"
          OWNER: ${{ github.repository_owner }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching old package versions for ${PACKAGE_NAME}..."

          # Define API URL
          API_URL="https://api.github.com/orgs/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions"

          # Fetch all package versions
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github+json" "$API_URL")

          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Error: Invalid response from GitHub API."
            exit 1
          fi

          package_ids=$(echo "$response" | jq -r '.[].id')

          if [ -z "$package_ids" ]; then
            echo "No old package versions to clean up."
            exit 0
          fi

          # Delete each version
          for package_id in $package_ids; do
            echo "Deleting version ID: $package_id"
            DELETE_URL="https://api.github.com/orgs/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions/$package_id"
            curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github+json" "$DELETE_URL" || echo "Failed to delete version ID: $package_id"
          done

          echo "Cleanup complete."

      # Step 5: Push New NuGet Package
      - name: Push NuGet Package
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Pushing new NuGet package to GitHub Packages..."
          dotnet nuget push artifacts/*.nupkg \
            --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
            --api-key $GITHUB_TOKEN --skip-duplicate
