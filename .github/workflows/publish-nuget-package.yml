name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Setup .NET SDK
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'  # Specify the desired .NET SDK version

      # Optional Step: Verify .NET Installation
      - name: Verify .NET Installation
        run: dotnet --info

      # Step 3: Generate Dynamic Version
      - name: Generate Dynamic Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%y%m%d')
          revision=$(date +'%H%M%S')
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV

      # Step 4: Verify Nuspec File Exists
      - name: Verify Nuspec File
        run: |
          if [ ! -f "nuget.package.nuspec" ]; then
            echo "Error: nuget.package.nuspec does not exist in the repository."
            exit 1
          fi
          echo "nuget.package.nuspec found."

      # Step 5: Update Version in Nuspec
      - name: Update Version in Nuspec
        run: |
          sed -i "s|<version>.*</version>|<version>${{ env.version }}</version>|g" NuGet/nuget.package.nuspec

      # Step 6: Generate Placeholder .dll (if missing)
      - name: Generate Placeholder .dll (if missing)
        run: |
          set -euo pipefail
          mkdir -p NuGetPackageContent/lib/net7.0
          if [ ! -f "NuGetPackageContent/lib/net7.0/PlaceholderDll.dll" ]; then
              echo "Generating placeholder .dll..."
              mkdir -p PlaceholderDll
              cd PlaceholderDll
              dotnet new classlib -n PlaceholderDll
              sed -i 's/<PropertyGroup>/<PropertyGroup><Version>1.0.0<\/Version>/' PlaceholderDll/PlaceholderDll.csproj
              dotnet build PlaceholderDll/PlaceholderDll.csproj -o ../NuGetPackageContent/lib/net7.0
              cd ..
              echo "Placeholder .dll generated at NuGetPackageContent/lib/net7.0/PlaceholderDll.dll"
          else
              echo "Placeholder .dll already exists."
          fi

      # Step 7: Prepare Files for NuGet Package
      - name: Prepare Files for NuGet Package
        run: |
          set -euo pipefail
          mkdir -p NuGetPackageContent
          cp -r BlueTeam-Tools NuGetPackageContent/ || true
          cp -r Core-ScriptLibrary NuGetPackageContent/ || true
          cp -r ITSM-Templates-SVR NuGetPackageContent/ || true
          cp -r ITSM-Templates-WKS NuGetPackageContent/ || true
          cp -r SysAdmin-Tools NuGetPackageContent/ || true
          cp LICENSE NuGetPackageContent/ || true
          cp README.md NuGetPackageContent/ || true

      # Step 8: Pack NuGet Package Using dotnet CLI
      - name: Pack NuGet Package
        run: |
          set -euo pipefail
          mkdir -p ./artifacts
          dotnet pack nuget.package.nuspec --output ./artifacts
          ls ./artifacts

      # Step 9: Inspect NuGet Package
      - name: Inspect NuGet Package
        run: |
          echo "Inspecting the contents of the package..."
          unzip -l ./artifacts/Windows-SysAdmin-ProSuite*.nupkg || true

      # Step 10: Publish NuGet Package Using dotnet CLI
      - name: Publish NuGet Package
        run: |
          set -euo pipefail
          dotnet nuget push ./artifacts/*.nupkg \
            --source "https://nuget.pkg.github.com/brazilianscriptguy/index.json" \
            --api-key "${{ secrets.GITHUB_TOKEN }}" \
            --skip-duplicate
