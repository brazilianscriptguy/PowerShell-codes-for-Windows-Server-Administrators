name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish-nuget:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Step 3: Generate Version
      - name: Generate Version
        id: generate_version
        run: |
          set -euo pipefail
          major=1
          minor=0
          build=$(date +'%y%m%d')
          revision=$(date +'%H%M')
          version="$major.$minor.$build.$revision"
          echo "version=$version" >> $GITHUB_ENV

      # Step 4: Prepare Files for Packaging
      - name: Prepare Files
        run: |
          set -euo pipefail
          echo "Preparing files for NuGet package..."
          mkdir -p NuGetPackageContent
          cp -r Core-ScriptLibrary NuGetPackageContent/ || true
          cp -r SysAdmin-Tools NuGetPackageContent/ || true
          cp -r ITSM-Templates-SVR NuGetPackageContent/ || true
          cp -r ITSM-Templates-WKS NuGetPackageContent/ || true
          cp README.md NuGetPackageContent/ || true
          cp LICENSE NuGetPackageContent/ || true
          echo "Files prepared for packaging."

# Step 5: Install NuGet CLI
- name: Install NuGet CLI
  run: |
    set -euo pipefail
    wget https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -O nuget.exe
    chmod +x ./nuget.exe

# Step 6: Pack NuGet Package
- name: Pack NuGet Package
  run: |
    set -euo pipefail
    echo "Packing the NuGet package..."
    mkdir -p ./artifacts  # Ensure artifacts directory exists

    # Use Mono to execute NuGet CLI
    mono ./nuget.exe pack nuget.package.nuspec -OutputDirectory ./artifacts

    echo "Checking artifacts directory..."
    ls ./artifacts

    # Verify the package file
    package_file=$(find ./artifacts -maxdepth 1 -name "Windows-SysAdmin-ProSuite*.nupkg" | head -n 1)
    if [[ -z "$package_file" ]]; then
        echo "Error: Package not found in ./artifacts"
        exit 1
    fi

    echo "Package successfully created: $package_file"
    echo "package_path=$package_file" >> $GITHUB_ENV

      # Step 7: Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          echo "Publishing package to GitHub Packages..."
          ./nuget push ${{ env.package_path }} -Source "github" -ApiKey $NUGET_AUTH_TOKEN --skip-duplicate
