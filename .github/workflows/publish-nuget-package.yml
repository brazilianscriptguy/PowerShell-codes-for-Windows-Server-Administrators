name: Manage NuGet Packages

on:
  workflow_dispatch: # Manual trigger
  schedule:          # Daily schedule
    - cron: '0 2 * * *' # Runs daily at 2:00 AM UTC

permissions:
  packages: write # Allows writing to GitHub Packages
  contents: read  # Allows reading repository contents

jobs:
  manage-nuget-packages:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Fix Unmet Dependencies and Install .NET SDK
      - name: Install Dependencies
        run: |
          echo "Setting up Microsoft repository for .NET..."
          wget https://packages.microsoft.com/config/ubuntu/20.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb
          sudo dpkg -i packages-microsoft-prod.deb
          rm packages-microsoft-prod.deb
          
          echo "Installing required packages..."
          sudo apt-get update
          sudo apt-get install -y apt-transport-https software-properties-common

          echo "Installing libicu for .NET runtime dependencies..."
          sudo apt-get install -y libicu-dev

          echo "Installing latest .NET SDK..."
          sudo apt-get install -y dotnet-sdk-7.0 || {
            echo "Fixing conflicts and retrying installation..."
            sudo apt-get -o Dpkg::Options::="--force-overwrite" install -y dotnet-sdk-7.0
          }

      # Step 3: Fetch existing NuGet packages
      - name: Fetch Published NuGet Packages
        id: fetch-packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        run: |
          echo "Fetching published NuGet packages from GitHub Packages..."
          response=$(curl -s -H "Authorization: Bearer $NUGET_AUTH_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/users/${{ github.repository_owner }}/packages?package_type=nuget")

          echo "API Response: $response"

          # Validate the JSON response
          if ! echo "$response" | jq empty; then
            echo "Error: Invalid JSON response from GitHub API."
            exit 1
          fi

          # Extract existing NuGet package names
          echo "$response" | jq -r '.[].name' > existing_packages.txt
          echo "Existing Packages:"
          cat existing_packages.txt

      # Step 4: Compare and push new packages
      - name: Push New NuGet Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        run: |
          artifact_dir="artifacts"
          if [ ! -d "$artifact_dir" ]; then
            echo "Error: Artifacts directory not found."
            exit 1
          fi

          # Loop through `.nupkg` files in artifacts directory
          for package_path in $artifact_dir/*.nupkg; do
            if [ ! -f "$package_path" ]; then
              echo "No .nupkg files found in artifacts directory."
              continue
            fi

            package_name=$(basename "$package_path")
            echo "Processing package: $package_name"

            # Extract version from package name
            if [[ "$package_name" =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
              package_version="${BASH_REMATCH[1]}"
              echo "Package version: $package_version"
            else
              echo "Error: Unable to extract version from package name."
              exit 1
            fi

            # Check if package already exists
            if grep -q "$package_name" existing_packages.txt; then
              echo "Package $package_name already exists. Skipping..."
              continue
            fi

            # Push package to GitHub Packages
            echo "Pushing $package_name to GitHub Packages..."
            dotnet nuget push "$package_path" \
              --source "https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json" \
              --api-key $NUGET_AUTH_TOKEN \
              --skip-duplicate || {
                echo "Error: Failed to push $package_name"
                exit 1
              }
          done

      # Step 5: Output Package Links
      - name: Generate Package Links
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.NUGET_AUTH_TOKEN }}
        run: |
          echo "Generating links for published NuGet packages..."
          while read -r package_name; do
            echo "Package: $package_name"
            echo "Link: https://github.com/users/${{ github.repository_owner }}/packages/nuget/package/$package_name"
          done < existing_packages.txt
