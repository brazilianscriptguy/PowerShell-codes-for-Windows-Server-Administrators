name: Publish NuGet Package

on:
  workflow_dispatch:
  release:
    types: [published]

permissions:
  packages: write
  contents: read

jobs:
  publish-nuget-package:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Install Required Dependencies
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      # Step 3: Delete Existing NuGet Package Versions
      - name: Delete Existing Package Versions
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_NAME="Windows-SysAdmin-ProSuite"
          OWNER="${{ github.repository_owner }}"
          echo "Fetching old package versions for ${PACKAGE_NAME}..."

          # Determine API endpoints for user and organization
          API_USER="https://api.github.com/users/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions"
          API_ORG="https://api.github.com/orgs/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions"

          # Fetch package versions using user-level API
          response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" $API_USER)

          # Check if the response is valid JSON; otherwise, try the organization-level API
          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Trying organization-level API..."
            response=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" $API_ORG)
          fi

          # Validate the response again
          if ! echo "$response" | jq empty 2>/dev/null; then
            echo "Error: Failed to fetch package versions."
            echo "$response"
            exit 1
          fi

          # Extract package version IDs
          echo "$response" | jq -r '.[].id' > package_ids.txt

          # Check if any package IDs exist
          if [ ! -s package_ids.txt ]; then
            echo "No existing package versions found for ${PACKAGE_NAME}."
            exit 0
          fi

          # Delete all fetched package versions
          while IFS= read -r package_id; do
            echo "Deleting version ID: $package_id"
            DELETE_URL="https://api.github.com/users/${OWNER}/packages/nuget/${PACKAGE_NAME}/versions/$package_id"
            curl -X DELETE -H "Authorization: Bearer $GITHUB_TOKEN" -H "Accept: application/vnd.github.v3+json" $DELETE_URL || echo "Failed to delete version ID: $package_id"
          done < package_ids.txt

          echo "Old versions of ${PACKAGE_NAME} have been cleaned."

      # Step 4: Build and Push NuGet Package
      - name: Publish NuGet Package
        env:
          NUGET_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PACKAGE_PATH="artifacts/Windows-SysAdmin-ProSuite.1.0.1.nupkg"
          SOURCE_URL="https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json"

          if [ ! -f "$PACKAGE_PATH" ]; then
            echo "Error: NuGet package not found at $PACKAGE_PATH"
            exit 1
          fi

          echo "Pushing NuGet package to $SOURCE_URL..."
          dotnet nuget push "$PACKAGE_PATH" \
            --source "$SOURCE_URL" \
            --api-key $NUGET_TOKEN \
            --skip-duplicate

          echo "NuGet package published successfully."
