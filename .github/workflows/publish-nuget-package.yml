name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish-nuget:
    runs-on: ubuntu-latest

    steps:
      # Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      # Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'

      # Generate Valid Version
      - name: Generate Valid Version
        id: generate_version
        run: |
          major=1
          minor=0
          build=$(date +'%y%m%d')
          revision=$(date +'%H%M')
          version="$major.$minor.$build.$revision"
          echo "Generated version: $version"
          echo "version=$version" >> $GITHUB_ENV

      # Generate Placeholder DLL
      - name: Generate Placeholder .dll (if missing)
        run: |
          set -euo pipefail
          echo "Ensuring placeholder .dll exists..."
          mkdir -p bin/Debug/net7.0
          if [ ! -f bin/Debug/net7.0/PlaceholderDll.dll ]; then
              echo "Generating placeholder .dll..."
              mkdir -p PlaceholderDll
              cd PlaceholderDll
              dotnet new classlib -n PlaceholderDll
              sed -i 's/<PropertyGroup>/<PropertyGroup><Version>1.0.0<\/Version>/' PlaceholderDll/PlaceholderDll.csproj
              dotnet build PlaceholderDll/PlaceholderDll.csproj -o ../bin/Debug/net7.0
              cd ..
              echo "Placeholder .dll generated."
          fi

      # Verify Placeholder DLL
      - name: Verify Placeholder DLL
        run: |
          if [ ! -f "bin/Debug/net7.0/PlaceholderDll.dll" ]; then
            echo "Error: PlaceholderDll.dll not found."
            exit 1
          fi
          echo "PlaceholderDll.dll is present."

      # Prepare NuGet Package Files
      - name: Prepare NuGet Package Files
        run: |
          set -euo pipefail
          echo "Preparing files for NuGet package..."
          mkdir -p NuGetPackageContent
          cp -r Core-ScriptLibrary NuGetPackageContent/ || true
          cp -r SysAdmin-Tools NuGetPackageContent/ || true
          cp -r ITSM-Templates-SVR NuGetPackageContent/ || true
          cp -r ITSM-Templates-WKS NuGetPackageContent/ || true
          cp README.md NuGetPackageContent/ || true
          cp LICENSE NuGetPackageContent/ || true
          echo "Files prepared for packaging."

      # Pack NuGet Package
      - name: Pack NuGet Package
        run: |
          set -euo pipefail
          echo "Packing the NuGet package..."
          mkdir -p ./artifacts  # Ensure artifacts directory exists

          # Pack the NuGet package
          dotnet pack nuget.package.csproj --output ./artifacts -p:NoBuild=true -p:PackageVersion=${{ env.version }}

          echo "Checking artifacts directory..."
          ls ./artifacts

          # Verify the package file
          package_file=$(find ./artifacts -maxdepth 1 -name "Windows-SysAdmin-ProSuite*.nupkg" | head -n 1)
          if [[ -z "$package_file" ]]; then
              echo "Error: Package not found in ./artifacts"
              exit 1
          fi

          echo "Package successfully created: $package_file"
          echo "package_path=$package_file" >> $GITHUB_ENV

      # Inspect NuGet Package Contents
      - name: Inspect NuGet Package Contents
        run: |
          echo "Inspecting the NuGet package contents..."
          package_file="${{ env.package_path }}"
          unzip -l "$package_file"

      # Publish to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          dotnet nuget push ${{ env.package_path }} --api-key $NUGET_AUTH_TOKEN --source "github" --skip-duplicate
