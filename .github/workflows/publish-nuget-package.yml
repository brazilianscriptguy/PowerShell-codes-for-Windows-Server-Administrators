name: Publish NuGet Package

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0  # Fetch all history for accurate tag detection

      # Step 2: Set up .NET
      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0'  # Specifies the .NET version to use

      # Step 3: Generate Version
      - name: Generate Version
        id: generate_version
        run: |
          set -euo pipefail  # Enable strict error handling

          # Define version components
          major=1
          minor=0
          build=$(date +'%Y%m%d')
          revision=$(date +'%H%M')
          version="$major.$minor.$build.$revision"

          # Export version as environment variable
          echo "version=$version" >> $GITHUB_ENV
          echo "Generated version: $version"

      # Step 4: Prepare Files
      - name: Prepare Files
        run: |
          set -euo pipefail  # Enable strict error handling

          echo "Preparing Windows-SysAdmin-ProSuite directory..."
          mkdir -p Windows-SysAdmin-ProSuite

          # Copy and rename the main README.md to main-README.md
          cp README.md Windows-SysAdmin-ProSuite/main-README.md || echo "README.md not found"
          echo "Copied and renamed README.md to Windows-SysAdmin-ProSuite/main-README.md"

          # Copy LICENSE
          cp LICENSE Windows-SysAdmin-ProSuite/LICENSE || echo "LICENSE not found"
          echo "Copied LICENSE to Windows-SysAdmin-ProSuite/LICENSE"

          # Process all valid directories
          for dir in */ ; do
              dir=${dir%/}  # Remove trailing slash
              if [[ "$dir" != "Windows-SysAdmin-ProSuite" && "$dir" != ".github" && "$dir" != "SysAdmin-Tools/GroupPolicyObjects-Templates" ]]; then
                  echo "Processing directory: $dir"
                  mkdir -p "Windows-SysAdmin-ProSuite/$dir"
                  cp -r "$dir/"* "Windows-SysAdmin-ProSuite/$dir/" || echo "Skipping $dir"
              fi
          done

          echo "Prepared files in Windows-SysAdmin-ProSuite:"
          find Windows-SysAdmin-ProSuite -type f

      # Step 5: Build and Pack NuGet Package
      - name: Build and Pack
        id: build_and_pack
        run: |
          set -euo pipefail  # Enable strict error handling

          echo "Packing the NuGet package..."
          mkdir -p ./artifacts  # Ensure artifacts directory exists

          # Build and pack the NuGet package with the generated version
          dotnet pack nuget.package.csproj --output ./artifacts -p:Version=${{ env.version }} || { echo "dotnet pack failed"; exit 1; }

          echo "Checking artifacts directory..."
          ls ./artifacts  # List contents of artifacts directory

          # Find the package file
          package_file=$(find ./artifacts -maxdepth 1 -name "Windows-SysAdmin-ProSuite*.nupkg" | head -n 1)
          if [[ -z "$package_file" ]]; then
              echo "Error: Package not found in ./artifacts"
              exit 1
          fi

          echo "Package successfully created: $package_file"

          # Export package path as environment variable
          echo "package_path=$package_file" >> $GITHUB_ENV

      # Step 6: Publish Package to GitHub Packages
      - name: Publish to GitHub Packages
        env:
          NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Use GitHub Token for authentication
        run: |
          set -euo pipefail  # Enable strict error handling

          echo "Publishing NuGet package to GitHub Packages..."
          dotnet nuget push "${{ env.package_path }}" \
            --api-key $NUGET_AUTH_TOKEN \
            --source "github" \
            --skip-duplicate || { echo "Failed to publish package"; exit 1; }

          echo "NuGet package published successfully."
