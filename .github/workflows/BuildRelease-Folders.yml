# Build and Release Workflow for Windows-SysAdmin-ProSuite
# This workflow automates the packaging and releasing of the project artifacts.
# It creates a ZIP file containing the necessary files and uploads it to the corresponding GitHub Release.
#
# SYNOPSIS
#     Build and Release Workflow for Windows-SysAdmin-ProSuite
#
# DESCRIPTION
#     This GitHub Actions workflow is designed to streamline the process of packaging and releasing
#     your PowerShell administration suite. It performs the following tasks:
#       1. Triggers automatically when a new release is published or manually via the Actions tab.
#       2. Checks out the repository, including submodules if any.
#       3. Sets up the PowerShell environment.
#       4. Builds and packages the required artifacts into a ZIP file.
#       5. Computes the SHA256 hash of the ZIP file for integrity verification.
#       6. Uploads the ZIP file as a release asset.
#       7. Optionally updates the release notes with the SHA256 hash.
#
# AUTHOR
#     Luiz Hamilton Silva - @brazilianscriptguy
#
# VERSION
#     Last Updated: December 29, 2024

name: Build and Release

on:
  workflow_dispatch:    # Allows manual triggering of the workflow
  release:
    types: [published]  # Triggers when a release is published

permissions:
  contents: write       # Allows creating and modifying releases

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      # Step 1: Check out the repository, including submodules if any
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: true    # Set to true if using Git submodules

      # Step 2: Set up PowerShell
      - name: Setup PowerShell
        uses: pwsh/setup-powershell@v1
        with:
          # Optional: Specify PowerShell version if needed
          # pwsh-version: '7.3.0'

      # Step 3: Build and package artifacts
      - name: Build and package artifacts
        id: package
        run: |
          # Create the main folder 'PowerShellCodes'
          New-Item -ItemType Directory -Path PowerShellCodes

          # Copy LICENSE and README.md to 'PowerShellCodes'
          Copy-Item -Path LICENSE -Destination PowerShellCodes\ -ErrorAction SilentlyContinue
          Copy-Item -Path README.md -Destination PowerShellCodes\ -ErrorAction SilentlyContinue

          # Iterate over all subdirectories (sub-repositories) in the main repository
          Get-ChildItem -Directory | ForEach-Object {
              $subrepo = $_.Name
              if ($subrepo -ne 'PowerShellCodes' -and $subrepo -ne '.git') {
                  # Copy all contents of the sub-repository into 'PowerShellCodes/<SubrepoName>'
                  Copy-Item -Path $_.FullName\* -Destination PowerShellCodes\$subrepo\ -Recurse -Force
              }
          }

          # Locate and copy 'Launch-Script-AutomaticMenu.ps1' into 'PowerShellCodes'
          $sourceFile = 'Core-ScriptLibrary\Launch-Script-AutomaticMenu.ps1'
          if (Test-Path $sourceFile) {
              Copy-Item -Path $sourceFile -Destination PowerShellCodes\ -Force
          } else {
              Write-Error "File $sourceFile not found. Aborting workflow."
          }

          # Compress the 'PowerShellCodes' folder into a ZIP file
          Compress-Archive -Path PowerShellCodes\* -DestinationPath Package-ProSuite.zip -Force

          # Output the path to the ZIP file for later steps
          $packagePath = (Resolve-Path Package-ProSuite.zip).Path
          echo "package-path=$packagePath" >> $env:GITHUB_OUTPUT

      # Step 4: Optional - Compute SHA256 hash of the package
      - name: Compute SHA256 hash
        id: compute_hash
        run: |
          $hash = Get-FileHash -Path ${{ steps.package.outputs.package-path }} -Algorithm SHA256
          echo "hash=$($hash.Hash)" >> $env:GITHUB_OUTPUT

      # Step 5: Upload the package as a GitHub Release asset
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ steps.package.outputs.package-path }}
          asset_name: Package-ProSuite.zip
          asset_content_type: application/zip

      # Step 6: Optional - Update release notes with the SHA256 hash
      - name: Update Release Notes with SHA256 Hash
        if: ${{ steps.compute_hash.outputs.hash != '' }}
        uses: actions/github-script@v6
        with:
          script: |
            const hash = '${{ steps.compute_hash.outputs.hash }}';
            const releaseId = context.payload.release.id;
            const currentBody = context.payload.release.body || '';
            const updatedBody = `${currentBody}\n\n**SHA256 Hash of Package-ProSuite.zip:** \`${hash}\``;
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: releaseId,
              body: updatedBody
            });
